<?php
/** 
 * code generated by vog
 * https://github.com/MarvinWank/vog
 */
declare(strict_types=1);

namespace Test\TestObjects;


use UnexpectedValueException;

final class SetWithPrimitiveType implements Set
{        
    private array $items;
        
    private function __construct(array $items = [])
    {
        $this->items = $items;
    }

    public static function fromArray(array $items) {
        foreach ($items as $key => $item) {
            $type = gettype($item);
            if($type !== 'string'){
                throw new UnexpectedValueException('array expects items of string but has ' . $type . ' on index ' . $key);
            }  
        }
        return new self($items);
    }
    
    public function toArray() {
        return $this->items;
    }
    public function equals(?self $other): bool
    {
        $ref = $this->toArray();
        $val = $other->toArray();
                
        return ($ref === $val);
    }
    
    public function count(): int
    {
        return count($this->items);
    }

    public function add(string $item): self {
        $values = $this->toArray();
        $values[] = $item;
        return self::fromArray($values);
    }
    
    public function contains(string $item): bool {
        return array_search($item, $this->items) !== false;
    }
    
    public function remove(string $item): self {
        $values = $this->toArray();
        if(($key = array_search($item, $values)) !== false) {
            unset($values[$key]);
        }
        $values = array_values($values);
        
        return self::fromArray($values);
    }
}